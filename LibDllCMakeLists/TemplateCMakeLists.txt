# @file	TemplateCMakeLists.txt
# @brief	A template CMakeLists.txt which can automatically generate project
# @author	WUZHUOBIN
# @version	1.8.0
# @date		Mar.22.2018
# @since	Sep.19.2017
# 
# This template is for generating CMake project easily. Only a few steps.
# 1.	Make a good folder name as the parent, because it is going to be your 
#		CMake Project name. 
# 2.	Place all header files and implementation files to your parent folder. 
#		If there is no header files and implementation files, skip this part. 
# 3.	Create a folder "main" to place your main function. It has to be named 
#		as "name.cpp". If there is no or a library is being created, skip this 
#		part. 
# 4.	Rename "TemplateCMakeLists.txt" to "CMakeLists.txt". 
# 
#
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#			Copyright (c) WUZHUOBIN 											    #
#			All rights reserved.												    #
#			See Copyright.txt													    #
#			This software is distributed WITHOUT ANY WARRANTY; without even		    #
#			the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR	    #
#			PURPOSE.  See the above copyright notice for more information.		    #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
cmake_minimum_required(VERSION 3.1) 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
get_filename_component(
	FOLDER_NAME 
	${CMAKE_CURRENT_SOURCE_DIR} 
	NAME
)
project(${FOLDER_NAME})

message(
	STATUS 
	"Building submodule ${PROJECT_NAME}..."
)

# multi-processor build
if(${MSVC})
	set(
		CMAKE_CXX_FLAGS 
		"${CMAKE_CXX_FLAGS} /MP"
	)
	set(
		CMAKE_C_FLAGS
		"${CMAKE_C_FLAGS} /MP"
	)
endif()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
# # # # # # # # # # # # # # # # # POLICY  # # # # # # # # # # # # # # # # # # # 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
cmake_policy(SET CMP0043 NEW)
cmake_policy(SET CMP0028 NEW)
# # # # # # # # # # # # # # # # # CHANGE BELOW  # # # # # # # # # # # # # # # # 


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
# # # # # # # # # # # # # # # # # # DEPENDENCY  # # # # # # # # # # # # # # # # 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 

# Adding dependency library you need
# Please remember to set it to SYSTEM_LIBRARIES as well 

# QT
find_package(Qt5Core REQUIRED)
find_package(Qt5Widgets REQUIRED)
# # # # # # # # # # # # # # # # # CHANGE BELOW  # # # # # # # # # # # # # # # # 
#find_package(Qt5.... REQUIRED)
#find_package(... REQURIED)

# OTHERS
#find_package()
#....

# QT_QRC
#set(
#	PROJECT_QRC
#	#PATH	
#)


# WINDOWS RESOURCES
# set(
# 	WINDOWS_RESOURCES
# 	# PATH
# )

# SYSTEM_DLL
# set(
# 	SYSTEM_DLL
# 	# PATH
# )

# SYSTEM_LIB
# set(
# 	SYSTEM_LIB
# 	# PATH
# )

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #  
# # # # # # # # # # # # # # # # # LIBRARIES # # # # # # # # # # # # # # # # # #  
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #  

set(
	CMAKE_ARCHIVE_OUTPUT_DIRECTORY
	${CMAKE_BINARY_DIR}/lib
)

set(
	CMAKE_LIBRARY_OUTPUT_DIRECTORY
	${CMAKE_BINARY_DIR}/lib
)
set(
	CMAKE_RUNTIME_OUTPUT_DIRECTORY 
	${CMAKE_BINARY_DIR}/bin
)

link_directories(
	${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}
	${CMAKE_LIBRARY_OUTPUT_DIRECTORY}
)

# copying external dll to executable path
if(${WIN32})
	# copy dll 
	file(
		GLOB_RECURSE
		SYSTEM_DLL
		${SYSTEM_DLL}
		*.dll
	)
	if(${MSVC})
		file(
			COPY
			${SYSTEM_DLL}
			DESTINATION
			${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Release
		)

		file(
			COPY
			${SYSTEM_DLL}
			DESTINATION
			${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Debug
		)
	else()
		file(
			COPY
			${SYSTEM_DLL}
			DESTINATION
			${CMAKE_RUNTIME_OUTPUT_DIRECTORY}
		)
	endif()

	message(
		STATUS
		"Copying Dll...\n"
		"FROM ${SYSTEM_DLL}\n"
		"TO ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}"
	)

endif()

set(
	SYSTEM_LIBRARIES
	Qt5::Core
	Qt5::Widgets
)

# find all external lib in the current folder recursively
if(${WIN32})
	file(
		GLOB_RECURSE
		SYSTEM_LIB
		${SYSTEM_LIB}
		*.lib
	)
	if(${MSVC})
		file(
			COPY
			${SYSTEM_LIB}
			DESTINATION
			${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}/Release
		)

		file(
			COPY
			${SYSTEM_LIB}
			DESTINATION
			${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}/Debug
		)
	else()
		file(
			COPY
			${SYSTEM_LIB}
			DESTINATION
			${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}
		)
	endif()
	
	foreach(LIB_NAME ${SYSTEM_LIB})
		
		get_filename_component(
			LIB_NAME
			${LIB_NAME}
			NAME
		)

		set(
			SYSTEM_LIBRARIES
			${SYSTEM_LIBRARIES}
			${LIB_NAME}
		)
	endforeach()
endif()

set(
	SYSTEM_INCLUDE
	${PROJECT_SOURCE_DIR}
	${PROJECT_BINARY_DIR}
)

# # # # # # # # # # # # # # # # # CHANGE BELOW  # # # # # # # # # # # # # # # # 
set(
	SYSTEM_LIBRARIES
	${SYSTEM_LIBRARIES}
	#OTHERS
	#...
)

set(
	SYSTEM_INCLUDE
	${SYSTEM_INCLUDE}
	#....
)


# Enable always build static library
set(LIB_TYPE STATIC)


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #  
# # # # # # # # # # # # # # # # # CODES # # # # # # # # # # # # # # # # # # # #  
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #  

file(GLOB PROJECT_SRC *.c*)
file(GLOB PROJECT_INC *.h*)
file(GLOB PROJECT_UI *.ui)
file(GLOB MAIN_CPP ${PROJECT_SOURCE_DIR}/main/*.c*)


# Output UI headers to specified location
qt5_wrap_ui(
	PROJECT_UI_H
	${PROJECT_UI}
)

qt5_wrap_cpp(
    PROJECT_MOC
    ${PROJECT_INC}
)

qt5_add_resources(
	PROJECT_QRC_SRC
	${PROJECT_QRC}
)

# Building library
if( NOT "${PROJECT_SRC}" STREQUAL "")

	add_library(
	    ${PROJECT_NAME}
		${LIB_TYPE}
	    ${PROJECT_SRC}
	    ${PROJECT_INC}
	    ${PROJECT_MOC}
		${PROJECT_UI}
		${PROJECT_UI_H}
		${PROJECT_QRC}
		${PROJECT_QRC_SRC}
 	    ${WINDOWS_RESOURCES}		
	)

	target_link_libraries(
	    ${PROJECT_NAME}
		${SYSTEM_LIBRARIES}
	)

	message(
		STATUS
		"Linking Libraries\n"
		"${SYSTEM_LIBRARIES}"
	)
	
	target_include_directories(
		${PROJECT_NAME}
		PUBLIC
		${SYSTEM_INCLUDE}
	)

	message(
		STATUS
		"Include directory\n"
		"${SYSTEM_INCLUDE}"
	)

	
endif()


if(EXISTS ${MAIN_CPP})

	add_executable(
		${PROJECT_NAME}_main
		${MAIN_CPP}
		${PROJECT_QRC}
		${PROJECT_QRC_SRC}
 	    ${WINDOWS_RESOURCES}
	)

	if(NOT "${PROJECT_SRC}" STREQUAL "")
		target_link_libraries(
			${PROJECT_NAME}_main
			${PROJECT_NAME}
		)
	else()
		target_link_libraries(
			${PROJECT_NAME}_main
			${SYSTEM_LIBRARIES}
		)
	endif()

endif()


#Grouping in MSVC
source_group(
	"Generated Files"
	FILES
	${PROJECT_MOC}
	${PROJECT_UI_H}
	${PROJECT_QRC_SRC}
)
source_group(
	"Forms Files"
	FILES
	${PROJECT_UI}
)
source_group(
	"Header Files" 
	FILES 
	${PROJECT_INC}
)
source_group(
	"Source Files" 
	FILES 
	${PROJECT_SRC}
	${MAIN_CPP}
)

MESSAGE(STATUS "Building submodule ${PROJECT_NAME} finished!")


